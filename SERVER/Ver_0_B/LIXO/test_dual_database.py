#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para testar os dois bancos de dados
"""

import sys
import os

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(__file__))

from flask import Flask
from config import CONFIG
from models.database import db, Organization, User, Asset
from modulos.pmoc.pmoc_models.pmoc_database import Notebook, Desktop

def test_dual_database():
    """Testa se os dois bancos de dados est√£o funcionando"""
    
    print("üß™ Testando configura√ß√£o de dois bancos de dados...")
    
    # Criar aplica√ß√£o Flask para teste
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = CONFIG.DATABASE_URL_DEFAULT
    app.config['SQLALCHEMY_BINDS'] = CONFIG.SQLALCHEMY_BINDS
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = CONFIG.SQLALCHEMY_TRACK_MODIFICATIONS
    
    # Inicializar banco (√∫nica inst√¢ncia)
    db.init_app(app)
    
    with app.app_context():
        try:
            print("\nüìä Testando banco principal (ISAC)...")
            
            # Testar banco principal
            org_count = Organization.query.count()
            user_count = User.query.count()
            asset_count = Asset.query.count()
            
            print(f"‚úÖ Banco principal funcionando!")
            print(f"   Organiza√ß√µes: {org_count}")
            print(f"   Usu√°rios: {user_count}")
            print(f"   Assets: {asset_count}")
            
        except Exception as e:
            print(f"‚ùå Erro no banco principal: {e}")
            return False
        
        try:
            print("\nüíª Testando banco PMOC...")
            
            # Testar banco PMOC
            notebook_count = Notebook.query.count()
            desktop_count = Desktop.query.count()
            
            print(f"‚úÖ Banco PMOC funcionando!")
            print(f"   Notebooks: {notebook_count}")
            print(f"   Desktops: {desktop_count}")
            
        except Exception as e:
            print(f"‚ùå Erro no banco PMOC: {e}")
            return False
    
    print("\nüéâ Ambos os bancos est√£o funcionando corretamente!")
    return True

def test_database_urls():
    """Testa se as URLs dos bancos est√£o corretas"""
    
    print("\nüîó Verificando URLs dos bancos...")
    
    print(f"Banco Principal: {CONFIG.DATABASE_URL_DEFAULT}")
    print(f"Banco PMOC: {CONFIG.DATABASE_URL_PMOC}")
    
    # Verificar se as URLs s√£o diferentes
    if CONFIG.DATABASE_URL_DEFAULT != CONFIG.DATABASE_URL_PMOC:
        print("‚úÖ URLs dos bancos s√£o diferentes (correto)")
    else:
        print("‚ùå URLs dos bancos s√£o iguais (erro)")
        return False
    
    return True

def test_configuration():
    """Testa se a configura√ß√£o est√° correta"""
    
    print("\n‚öôÔ∏è Verificando configura√ß√£o...")
    
    # Verificar se as configura√ß√µes est√£o definidas
    required_configs = [
        'DATABASE_URL_DEFAULT',
        'DATABASE_URL_PMOC',
        'SQLALCHEMY_BINDS'
    ]
    
    for config in required_configs:
        if hasattr(CONFIG, config):
            print(f"‚úÖ {config}: Configurado")
        else:
            print(f"‚ùå {config}: N√£o configurado")
            return False
    
    # Verificar SQLALCHEMY_BINDS
    if 'pmoc' in CONFIG.SQLALCHEMY_BINDS:
        print("‚úÖ SQLALCHEMY_BINDS: Configurado corretamente")
    else:
        print("‚ùå SQLALCHEMY_BINDS: N√£o configurado corretamente")
        return False
    
    return True

def main():
    print("üöÄ Iniciando testes de dois bancos de dados...")
    
    # Testar configura√ß√£o
    if not test_configuration():
        print("‚ùå Falha na configura√ß√£o")
        return
    
    # Testar URLs
    if not test_database_urls():
        print("‚ùå Falha nas URLs dos bancos")
        return
    
    # Testar bancos
    if not test_dual_database():
        print("‚ùå Falha nos bancos de dados")
        return
    
    print("\nüéâ Todos os testes passaram! Sistema configurado corretamente.")

if __name__ == "__main__":
    main() 